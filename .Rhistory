install.packages(c("dplyr", "lubridate"))
install.packages("googlesheets4")
knitr::opts_chunk$set(echo = TRUE)
library(googlesheets4)
library('googlesheets4')
library('googlesheets4')
library('googlesheets4')
library('dplyr')
library('lubridate')
library('googlesheets4')
library('dplyr')
library('lubridate')
install.packages("tidyverse")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
exDataPost80s <- read_csv("https://www.dropbox.com/s/rc6t40gsxduysz6/exDataPost80s.csv?dl=1")
View(exDataPost80s)
a <- 2
a = 2
b <- 3
my_108_total_credits <- 15
_108_total_credits <- 15
my_108_total_credits <- 15
_108_total_credits <- 15
`我的年紀` <- 20
my age <- `我的年紀`
`我的年紀` <- 20
my_age <- `我的年紀`
num1 <- 5
vNum1 <- c(2,5)
vNum2 <- c(2, num1)
num1 <- 5
num2 <- c(5)
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum1,vNum2)
vNum4 <- c(-1,5,2,3)
vNum5 <- c(c(-1,5),c(2,3))
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代 （recursive vector concatenate）
num1 <- 5
vNum1 <- c(2,5)
vNum2 <- c(2, num1)
num1 <- 5
num2 <- c(5)
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum1,vNum2)
vNum4 <- c(-1,5,2,3)
vNum5 <- c(c(-1,5),c(2,3))
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum4 <- c() # 空向量
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代 （recursive vector concatenate）
library(googlesheets4)
`出席狀況表單網址` <-  # 缺乏定義值
'https://docs.google.com/spreadsheets/d/1oB-5hj1pO5g8FMpZbA7RgIG8NvCRx6WvLPwvleCEV4Q/edit#gid=987577191'
ss <- as_sheets_id(`出席狀況表單網址`)
homework_sheet <- sheets_read(ss,sheet=1)
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
str(transcript100to103)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
str(transcript100to103)
unique(transcript100to103$學院)
unique(transcript100to103$學院)
unique(transcript100to103$`學院`)
set_LawBussiness <- c("法學院", "商學院")
set_LawBussiness <- c("法學院", "商學院")
pick_LawBussiness <- transcript100to103$`學院` %in% set_LawBussiness
transcript100to103$`學院`[pick_LawBussiness]
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female$`數目`)
sum(pick_na)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
View(garbageRoutes)
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
?str_detect
?str_detect
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
View(CDC_chatbox)
str(CDC_chatbox)
library(stringr)
pick_pneumonia <- str_detect(CDC_chatbox$Question, "肺炎")
CDC_chatbox$Question[pick_pneumonia]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
View(badEmployers)
# violatedArticles
levels(badEmployers$law)
# violatedArticles
levels(badEmployers$`law`)
# violatedArticles
levels(badEmployers$law)
# violatedArticles
class(badEmployers$law)
levels(badEmployers$law)
# violatedArticles
class(badEmployers$law)
levels(as.character(badEmployers$law))
# violatedArticles
factor(badEmployers$law)
# violatedArticles
levels(factor(badEmployers$law))
# violatedArticles
levels(factor(badEmployers$law))
# violatedArticles
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
# violatedArticles
levels(factor(badEmployers$law))
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
View(transcript100to103)
View(badEmployers)
# table_countsByArticle
table(badEmployers$law)
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
View(table)
View(students10)
# ntpu_namelist
str(students10$`志願`)
# ntpu_namelist
str(students10$志願)
# ntpu_namelist
str(students10$`志願`)
# ntpu_namelist
students10$`志願`
# ntpu_namelist
str_detect(students10$`志願`, "北大")
# ntpu_namelist
print(students10[c("姓名", "志願")])
str_detect(students10$`志願`, "北大")
# ntpu_namelist
print(students10[c("姓名", "志願")])
pick_ntpu <- str_detect(students10$`志願`, "北大")
ntpu_namelist$`姓名`[]
# ntpu_namelist
print(students10[c("姓名", "志願")])
pick_ntpu <- str_detect(students10$`志願`, "北大")
ntpu_namelist <- students10$`姓名`[pick_ntpu]
# ntpu_namelist
print(students10[c("姓名", "志願")])
pick_ntpu <- str_detect(students10$`志願`, "北大")
ntpu_namelist <- students10$`姓名`[pick_ntpu]
ntpu_namelist
